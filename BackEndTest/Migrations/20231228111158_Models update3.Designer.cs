// <auto-generated />
using System;
using BackEndTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackEndTest.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231228111158_Models update3")]
    partial class Modelsupdate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEndTest.Models.Car", b =>
                {
                    b.Property<int>("carNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("carNumber"));

                    b.Property<DateTime>("dateAndTimeLastOperation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("freightEtsngName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("freightTotalWeightKg")
                        .HasColumnType("integer");

                    b.Property<string>("invoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastOperationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastStationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("positionInTrain")
                        .HasColumnType("integer");

                    b.HasKey("carNumber");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("BackEndTest.Models.Train", b =>
                {
                    b.Property<int>("trainNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("trainNumber"));

                    b.Property<string>("fromStationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("toStationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("trainIndexCombined")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("trainNumber");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("BackEndTest.Models.TrainsCar", b =>
                {
                    b.Property<int>("traintNumber")
                        .HasColumnType("integer");

                    b.Property<int>("carNumber")
                        .HasColumnType("integer");

                    b.HasKey("traintNumber", "carNumber");

                    b.ToTable("trainsCars");
                });

            modelBuilder.Entity("BackEndTest.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
